#lang racket
(define (square num)
  (* num num)
  )

(define (smallest-divisor n)
  (find-divisor n 2)
  )

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))
        )
  )

(define (divides? a b)
  (= (remainder b a) 0)
  )

(define (prime? n)
  (= n (smallest-divisor n))
  )

(define (num-prime-divs-list num)
  (define half (quotient num 2))
  (define (iter i ls)
    (if (> i half)
        (if (empty? ls)
            (cons num ls)
            ls
            )
        (if (= i 2)
            (if (= 0 (remainder num i))
                (iter (add1 i) (cons 2 ls))
                (iter (add1 i) ls))
                (if (and (= 0 (remainder num i))(prime? i))
                    (iter (+ 2 i)(cons i ls))
                    (iter (+ 2 i) ls))
                )
            )
        )
    (iter 2 '())
    )