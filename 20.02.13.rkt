#lang racket
(define (str2int str)
  (define (help lst1 lst2 lst3 lst4 a b)
    (if (empty? lst1) lst2;(int2int (reverse lst2) (filter positive? lst3) (reverse lst4))
        (if (and (> (char->integer (car lst1)) 47) (< (char->integer (car lst1)) 58))
            (if (or (or (equal? #\space a) (equal? #\- a)) (and (> (char->integer a) 47) (< (char->integer a) 58)))
                (help (cdr lst1) (cons (char->integer (car lst1)) lst2) lst3 (if (equal? #\- a) (cons -1 lst4) 
                                                                                 (if (equal? #\space a) (cons 1 lst4) 
                                                                                     lst4)) (car lst1) (+ b 1))
                (help (cdr lst1) lst2 lst3 lst4 (car lst1) 0))
            (if (and (> (char->integer (car lst1)) 47) (< (char->integer (car lst1)) 58))
                (help (cdr lst1) lst2 lst3 lst4 (car lst1) 0)
                (help (cdr lst1) lst2 (cons b lst3) lst4 (car lst1) 0)))))
  (help (string->list str) '() '() '() #\space 0))

(define (int2int lst1 lst2 lst3)
  (define (help lst1 lst2 lst3 lst4 a b)
    (if (empty? lst1) (reverse (cons (* b (car lst4)) lst3))
        (if (= a (car lst2)) 
            (help lst1 (cdr lst2) (cons (* b (car lst4)) lst3) (cdr lst4) 0 0)
            (help (cdr lst1) lst2 lst3 lst4 (+ a 1) (+ (* b 10) (cond ((= (car lst1) 48) 0)
                                                                 ((= (car lst1) 49) 1)
                                                                 ((= (car lst1) 50) 2)
                                                                 ((= (car lst1) 51) 3)
                                                                 ((= (car lst1) 52) 4)
                                                                 ((= (car lst1) 53) 5)
                                                                 ((= (car lst1) 54) 6)
                                                                 ((= (car lst1) 55) 7)
                                                                 ((= (car lst1) 56) 8)
                                                                 ((= (car lst1) 57) 9)))))))
  (help lst1 lst2 '() lst3 0 0))