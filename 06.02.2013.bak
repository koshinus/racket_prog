#lang racket
(define (func-amount f)
  (define (help lst1 lst2 n m)
    (if (empty? lst1) n
        (if (or (equal? (car lst1) #\d) (equal? (car lst1) #\space)) 
            (if (= m 1) 
                (help (cdr lst1) '() (if (equal? (list->string (reverse (cons (car lst1) lst2))) "define ") (+ n 1) n) 0)
                (help (cdr lst1) (cons (car lst1) lst2) n (+ m 1)))
            (if (= m 1)
                (help (cdr lst1) (cons (car lst1) lst2) n m)
                (help (cdr lst1) lst2 n m)))))
  (help (string->list (file->string f)) '() 0 0))

(define (tof2 lst f)
  (define out (open-output-file f))
    (define (help lst)
      (if (empty? lst) (close-output-port out)
          (begin (write-string (car lst) out) (help (cdr lst)))))
  (help lst))

(define (transfer f)
  (define (help lst1 lst2 lst3)
    (if (empty? lst1) (tof2 (reverse (cons (list->string (reverse lst2)) lst3)) "in3.txt")
        (if (equal? (car lst1) #\space) (help (cdr lst1) '() (cons (list->string (reverse (cons #\space lst2))) lst3))
          (if (equal? (car lst1) #\-)
              (if (and (equal? (cadr lst1) #\return) (equal? (caddr lst1) #\newline))
                  (help (cdddr lst1) lst2 lst3)
                  (help (cdr lst1) (cons (car lst1) lst2) lst3))
              (help (cdr lst1) (cons (car lst1) lst2) lst3)))))
  (help (string->list (file->string f)) '() '()))